options {
	JAVA_UNICODE_ESCAPE=true;
	STATIC=false;					// 1 seul parseur actif a la fois (+ rapide)
	MULTI=true;						// type noeud = f(nom noeud)
	VISITOR=true;					// Cree une methode accept(visiteur)
}

//
// PARSER DEFINITION
//

PARSER_BEGIN(Parser)

package analyzer.ast;

public class Parser
{
	public static ASTProgram ParseTree(java.io.InputStream input) throws ParseException
	{
		Parser c = new Parser(input);
		return c.Program();
	}
}

PARSER_END(Parser)

//
// LEXICAL ANALYSIS
//

// White space

SKIP :
{
	< ( " " | "\t" | "\n" | "\r" )+	>
}

// Comments

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}




// Keywords
TOKEN :
{
	< IF: "if"	> |
	< ELSE: "else" > |
	< WHILE: "while" > |
	< TYPE: < STRING > | < INT > | < FLOAT > | < BOOL > > |
	< #STRING: "string"> |
	< #INT: "int"> |
	< #FLOAT: "float" > |
	< #BOOL: "bool"> |
	< PRINT: "print" > |
	< INPUT: "input" >
	// A COMPLETER
}

// Operators
TOKEN :
{
	<ASSIGN: < EQUAL > | < PLUSEQUAL > | < MINUSEQUAL > | < POWEQUAL > | < DIVEQUAL > | < FOISEQUAL > > |
	<COMPARE: < LESS > | < LESSEQUAL > | < GREAT > | <GREATEQUAL > | < DIFF > | < EQUALEQUAL > > |

	< #LESS: "<" > |
	< #LESSEQUAL: "<=" > |
	< #GREAT: ">" > |
	< #GREATEQUAL: ">=" > |
	< #DIFF: "!=" > |
	< #EQUALEQUAL: "==" > |

	< PLUS: "+" > |
	< MINUS: "-" > |
	< FOIS: "*" > |
	< DIV: "/" > |
	< POW: "^" > |
	< AND: "&&" > |
	< OR: "||" > |
	< NOT: "not" > |

	< #EQUAL: "=" > |
	< #PLUSEQUAL: "+=" > |
	< #MINUSEQUAL: "-=" > |
	< #POWEQUAL: "^=" > |
	< #DIVEQUAL: "/=" > |
	< #FOISEQUAL: "*=" > |
	< LPAREN: "(" > |
	< RPAREN: ")" > |
	< LACC: "{" > |
	< RACC: "}" > |
	< COLON: ":" > |
	< SEMICOLON: ";" > |
	< COMMA: "," >
	// A COMPLETER
}


// Identifiers and numbers
TOKEN :
{
	< IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
	< #LETTER: ["a"-"z","A"-"Z","_"] > |
	< #DIGIT: ["0"-"9"] > |
	< INTEGER: ["1"-"9"] (["0"-"9"])* | "0" > |
	// // Caution! Allows numbers such as "0000.23"
	< REAL: (<INTEGER>)+ "." (["0"-"9"])+ (<EXPONENT>)? |
			  (<INTEGER>)+ <EXPONENT> > |
	< #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}







//
// SYNTAX ANALYSIS
//

ASTProgram Program() : { }
{
	Block() <EOF> { return jjtThis;  }
}

void Block() : { }
{
	 ( Stmt() )*
}

void Stmt() : { }
{

	AssignStmt() ";" |
	WhileStmt() |
	IfStmt() |
    IOStmt() ";"
}

void AssignStmt() : { Token t;}
{
	(
        LOOKAHEAD(2) Identifier() t = <ASSIGN>
        {
            jjtThis.addOp(t.image);
        }
	)+ Expr()
}

void WhileStmt() : {}
{
	"while" "(" Expr() ")" "{" Block() "}"
}

void IfStmt() : {}
{
	"if" "(" Expr() ")" "{" Block() "}" ["else" "{" Block() "}"]
}

void IOStmt() : { Token t;}
{
	(
        t = <PRINT> "(" Expr() ")" |
        t = <INPUT> "(" Identifier() ")"
	)
	{
	    jjtThis.setOp(t.image);
	}
}

void Expr() : {}
{
    AddExpr()
}

void AddExpr() : { Token t;}
{
    MultExpr() (
        (t = "+" | t = "-") MultExpr()
        {
            jjtThis.addOp(t.image);
        }
    )*
}

void MultExpr() : { Token t;}
{
    PowExpr() (
        (t = "*" | t = "/") PowExpr()
        {
            jjtThis.addOp(t.image);
        }
    )*
}

void PowExpr() : {}
{
	NegExpr() ( "^" NegExpr() )*
}

void NegExpr() : {}
{
	(
	    "-" BasicExpr()
	    {
	        jjtThis.setNeg();
	    }
	) |
	BasicExpr()
}

void BasicExpr() : {}
{
	LOOKAHEAD(2) FctExpr() |
	Identifier()|
	IntValue() |
	RealValue() |
	"(" Expr() ")"
}

void FctExpr(): { Token t;}
{
	t=<IDENTIFIER> {jjtThis.setValue(t.image);} "(" Expr() [ "," Expr() ] ")"
}

void Identifier() : { Token t;}
{
	t = <IDENTIFIER> {jjtThis.setValue(t.image);}
}

void IntValue() : { Token t;}
{
	t = <INTEGER> {jjtThis.setValue(Integer.parseInt(t.image));}
}


void RealValue() : { Token t;}
{
	t = <REAL> {jjtThis.setValue(Double.parseDouble(t.image));}
}